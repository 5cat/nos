/*
 * Copyright 2023 Nebuly.ai.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	gpu "github.com/nebuly-ai/nos/pkg/gpu"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// SliceCalculator is an autogenerated mock type for the SliceCalculator type
type SliceCalculator struct {
	mock.Mock
}

// GetRequestedSlices provides a mock function with given fields: pod
func (_m *SliceCalculator) GetRequestedSlices(pod v1.Pod) map[gpu.Slice]int {
	ret := _m.Called(pod)

	var r0 map[gpu.Slice]int
	if rf, ok := ret.Get(0).(func(v1.Pod) map[gpu.Slice]int); ok {
		r0 = rf(pod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[gpu.Slice]int)
		}
	}

	return r0
}

type mockConstructorTestingTNewSliceCalculator interface {
	mock.TestingT
	Cleanup(func())
}

// NewSliceCalculator creates a new instance of SliceCalculator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSliceCalculator(t mockConstructorTestingTNewSliceCalculator) *SliceCalculator {
	mock := &SliceCalculator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

/*
 * Copyright 2022 Nebuly.ai
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	core "github.com/nebuly-ai/nos/internal/partitioning/core"
	gpu "github.com/nebuly-ai/nos/pkg/gpu"

	mock "github.com/stretchr/testify/mock"

	state "github.com/nebuly-ai/nos/internal/partitioning/state"

	v1 "k8s.io/api/core/v1"
)

// Snapshot is an autogenerated mock type for the Snapshot type
type Snapshot struct {
	mock.Mock
}

// AddPod provides a mock function with given fields: node, pod
func (_m *Snapshot) AddPod(node string, pod v1.Pod) error {
	ret := _m.Called(node, pod)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, v1.Pod) error); ok {
		r0 = rf(node, pod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clone provides a mock function with given fields:
func (_m *Snapshot) Clone() core.Snapshot {
	ret := _m.Called()

	var r0 core.Snapshot
	if rf, ok := ret.Get(0).(func() core.Snapshot); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Snapshot)
		}
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *Snapshot) Commit() {
	_m.Called()
}

// Fork provides a mock function with given fields:
func (_m *Snapshot) Fork() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCandidateNodes provides a mock function with given fields:
func (_m *Snapshot) GetCandidateNodes() []core.PartitionableNode {
	ret := _m.Called()

	var r0 []core.PartitionableNode
	if rf, ok := ret.Get(0).(func() []core.PartitionableNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.PartitionableNode)
		}
	}

	return r0
}

// GetLackingSlices provides a mock function with given fields: pod
func (_m *Snapshot) GetLackingSlices(pod v1.Pod) map[gpu.Slice]int {
	ret := _m.Called(pod)

	var r0 map[gpu.Slice]int
	if rf, ok := ret.Get(0).(func(v1.Pod) map[gpu.Slice]int); ok {
		r0 = rf(pod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[gpu.Slice]int)
		}
	}

	return r0
}

// GetNode provides a mock function with given fields: name
func (_m *Snapshot) GetNode(name string) (core.PartitionableNode, bool) {
	ret := _m.Called(name)

	var r0 core.PartitionableNode
	if rf, ok := ret.Get(0).(func(string) core.PartitionableNode); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.PartitionableNode)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields:
func (_m *Snapshot) GetNodes() map[string]core.PartitionableNode {
	ret := _m.Called()

	var r0 map[string]core.PartitionableNode
	if rf, ok := ret.Get(0).(func() map[string]core.PartitionableNode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]core.PartitionableNode)
		}
	}

	return r0
}

// GetPartitioningState provides a mock function with given fields:
func (_m *Snapshot) GetPartitioningState() state.PartitioningState {
	ret := _m.Called()

	var r0 state.PartitioningState
	if rf, ok := ret.Get(0).(func() state.PartitioningState); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(state.PartitioningState)
		}
	}

	return r0
}

// Revert provides a mock function with given fields:
func (_m *Snapshot) Revert() {
	_m.Called()
}

// SetNode provides a mock function with given fields: n
func (_m *Snapshot) SetNode(n core.PartitionableNode) {
	_m.Called(n)
}

type mockConstructorTestingTNewSnapshot interface {
	mock.TestingT
	Cleanup(func())
}

// NewSnapshot creates a new instance of Snapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSnapshot(t mockConstructorTestingTNewSnapshot) *Snapshot {
	mock := &Snapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

/*
 * Copyright 2022 Nebuly.ai
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.14.1. DO NOT EDIT.

package scheduler

import (
	context "context"

	config "k8s.io/kubernetes/pkg/scheduler/apis/config"

	events "k8s.io/client-go/tools/events"

	framework "k8s.io/kubernetes/pkg/scheduler/framework"

	informers "k8s.io/client-go/informers"

	kubernetes "k8s.io/client-go/kubernetes"

	mock "github.com/stretchr/testify/mock"

	parallelize "k8s.io/kubernetes/pkg/scheduler/framework/parallelize"

	rest "k8s.io/client-go/rest"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/api/core/v1"
)

// Framework is an autogenerated mock type for the Framework type
type Framework struct {
	mock.Mock
}

// AddNominatedPod provides a mock function with given fields: pod, nominatingInfo
func (_m *Framework) AddNominatedPod(pod *framework.PodInfo, nominatingInfo *framework.NominatingInfo) {
	_m.Called(pod, nominatingInfo)
}

// ClientSet provides a mock function with given fields:
func (_m *Framework) ClientSet() kubernetes.Interface {
	ret := _m.Called()

	var r0 kubernetes.Interface
	if rf, ok := ret.Get(0).(func() kubernetes.Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kubernetes.Interface)
		}
	}

	return r0
}

// DeleteNominatedPodIfExists provides a mock function with given fields: pod
func (_m *Framework) DeleteNominatedPodIfExists(pod *v1.Pod) {
	_m.Called(pod)
}

// EventRecorder provides a mock function with given fields:
func (_m *Framework) EventRecorder() events.EventRecorder {
	ret := _m.Called()

	var r0 events.EventRecorder
	if rf, ok := ret.Get(0).(func() events.EventRecorder); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(events.EventRecorder)
		}
	}

	return r0
}

// Extenders provides a mock function with given fields:
func (_m *Framework) Extenders() []framework.Extender {
	ret := _m.Called()

	var r0 []framework.Extender
	if rf, ok := ret.Get(0).(func() []framework.Extender); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]framework.Extender)
		}
	}

	return r0
}

// GetWaitingPod provides a mock function with given fields: uid
func (_m *Framework) GetWaitingPod(uid types.UID) framework.WaitingPod {
	ret := _m.Called(uid)

	var r0 framework.WaitingPod
	if rf, ok := ret.Get(0).(func(types.UID) framework.WaitingPod); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(framework.WaitingPod)
		}
	}

	return r0
}

// HasFilterPlugins provides a mock function with given fields:
func (_m *Framework) HasFilterPlugins() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasPostFilterPlugins provides a mock function with given fields:
func (_m *Framework) HasPostFilterPlugins() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasScorePlugins provides a mock function with given fields:
func (_m *Framework) HasScorePlugins() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IterateOverWaitingPods provides a mock function with given fields: callback
func (_m *Framework) IterateOverWaitingPods(callback func(framework.WaitingPod)) {
	_m.Called(callback)
}

// KubeConfig provides a mock function with given fields:
func (_m *Framework) KubeConfig() *rest.Config {
	ret := _m.Called()

	var r0 *rest.Config
	if rf, ok := ret.Get(0).(func() *rest.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.Config)
		}
	}

	return r0
}

// ListPlugins provides a mock function with given fields:
func (_m *Framework) ListPlugins() *config.Plugins {
	ret := _m.Called()

	var r0 *config.Plugins
	if rf, ok := ret.Get(0).(func() *config.Plugins); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Plugins)
		}
	}

	return r0
}

// NominatedPodsForNode provides a mock function with given fields: nodeName
func (_m *Framework) NominatedPodsForNode(nodeName string) []*framework.PodInfo {
	ret := _m.Called(nodeName)

	var r0 []*framework.PodInfo
	if rf, ok := ret.Get(0).(func(string) []*framework.PodInfo); ok {
		r0 = rf(nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*framework.PodInfo)
		}
	}

	return r0
}

// Parallelizer provides a mock function with given fields:
func (_m *Framework) Parallelizer() parallelize.Parallelizer {
	ret := _m.Called()

	var r0 parallelize.Parallelizer
	if rf, ok := ret.Get(0).(func() parallelize.Parallelizer); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(parallelize.Parallelizer)
	}

	return r0
}

// ProfileName provides a mock function with given fields:
func (_m *Framework) ProfileName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QueueSortFunc provides a mock function with given fields:
func (_m *Framework) QueueSortFunc() framework.LessFunc {
	ret := _m.Called()

	var r0 framework.LessFunc
	if rf, ok := ret.Get(0).(func() framework.LessFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(framework.LessFunc)
		}
	}

	return r0
}

// RejectWaitingPod provides a mock function with given fields: uid
func (_m *Framework) RejectWaitingPod(uid types.UID) bool {
	ret := _m.Called(uid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.UID) bool); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RunBindPlugins provides a mock function with given fields: ctx, state, pod, nodeName
func (_m *Framework) RunBindPlugins(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) *framework.Status {
	ret := _m.Called(ctx, state, pod, nodeName)

	var r0 *framework.Status
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, string) *framework.Status); ok {
		r0 = rf(ctx, state, pod, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.Status)
		}
	}

	return r0
}

// RunFilterPlugins provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Framework) RunFilterPlugins(_a0 context.Context, _a1 *framework.CycleState, _a2 *v1.Pod, _a3 *framework.NodeInfo) framework.PluginToStatus {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 framework.PluginToStatus
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, *framework.NodeInfo) framework.PluginToStatus); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(framework.PluginToStatus)
		}
	}

	return r0
}

// RunFilterPluginsWithNominatedPods provides a mock function with given fields: ctx, state, pod, info
func (_m *Framework) RunFilterPluginsWithNominatedPods(ctx context.Context, state *framework.CycleState, pod *v1.Pod, info *framework.NodeInfo) *framework.Status {
	ret := _m.Called(ctx, state, pod, info)

	var r0 *framework.Status
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, *framework.NodeInfo) *framework.Status); ok {
		r0 = rf(ctx, state, pod, info)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.Status)
		}
	}

	return r0
}

// RunPermitPlugins provides a mock function with given fields: ctx, state, pod, nodeName
func (_m *Framework) RunPermitPlugins(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) *framework.Status {
	ret := _m.Called(ctx, state, pod, nodeName)

	var r0 *framework.Status
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, string) *framework.Status); ok {
		r0 = rf(ctx, state, pod, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.Status)
		}
	}

	return r0
}

// RunPostBindPlugins provides a mock function with given fields: ctx, state, pod, nodeName
func (_m *Framework) RunPostBindPlugins(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) {
	_m.Called(ctx, state, pod, nodeName)
}

// RunPostFilterPlugins provides a mock function with given fields: ctx, state, pod, filteredNodeStatusMap
func (_m *Framework) RunPostFilterPlugins(ctx context.Context, state *framework.CycleState, pod *v1.Pod, filteredNodeStatusMap framework.NodeToStatusMap) (*framework.PostFilterResult, *framework.Status) {
	ret := _m.Called(ctx, state, pod, filteredNodeStatusMap)

	var r0 *framework.PostFilterResult
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, framework.NodeToStatusMap) *framework.PostFilterResult); ok {
		r0 = rf(ctx, state, pod, filteredNodeStatusMap)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.PostFilterResult)
		}
	}

	var r1 *framework.Status
	if rf, ok := ret.Get(1).(func(context.Context, *framework.CycleState, *v1.Pod, framework.NodeToStatusMap) *framework.Status); ok {
		r1 = rf(ctx, state, pod, filteredNodeStatusMap)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*framework.Status)
		}
	}

	return r0, r1
}

// RunPreBindPlugins provides a mock function with given fields: ctx, state, pod, nodeName
func (_m *Framework) RunPreBindPlugins(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) *framework.Status {
	ret := _m.Called(ctx, state, pod, nodeName)

	var r0 *framework.Status
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, string) *framework.Status); ok {
		r0 = rf(ctx, state, pod, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.Status)
		}
	}

	return r0
}

// RunPreFilterExtensionAddPod provides a mock function with given fields: ctx, state, podToSchedule, podInfoToAdd, nodeInfo
func (_m *Framework) RunPreFilterExtensionAddPod(ctx context.Context, state *framework.CycleState, podToSchedule *v1.Pod, podInfoToAdd *framework.PodInfo, nodeInfo *framework.NodeInfo) *framework.Status {
	ret := _m.Called(ctx, state, podToSchedule, podInfoToAdd, nodeInfo)

	var r0 *framework.Status
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, *framework.PodInfo, *framework.NodeInfo) *framework.Status); ok {
		r0 = rf(ctx, state, podToSchedule, podInfoToAdd, nodeInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.Status)
		}
	}

	return r0
}

// RunPreFilterExtensionRemovePod provides a mock function with given fields: ctx, state, podToSchedule, podInfoToRemove, nodeInfo
func (_m *Framework) RunPreFilterExtensionRemovePod(ctx context.Context, state *framework.CycleState, podToSchedule *v1.Pod, podInfoToRemove *framework.PodInfo, nodeInfo *framework.NodeInfo) *framework.Status {
	ret := _m.Called(ctx, state, podToSchedule, podInfoToRemove, nodeInfo)

	var r0 *framework.Status
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, *framework.PodInfo, *framework.NodeInfo) *framework.Status); ok {
		r0 = rf(ctx, state, podToSchedule, podInfoToRemove, nodeInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.Status)
		}
	}

	return r0
}

// RunPreFilterPlugins provides a mock function with given fields: ctx, state, pod
func (_m *Framework) RunPreFilterPlugins(ctx context.Context, state *framework.CycleState, pod *v1.Pod) (*framework.PreFilterResult, *framework.Status) {
	ret := _m.Called(ctx, state, pod)

	var r0 *framework.PreFilterResult
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod) *framework.PreFilterResult); ok {
		r0 = rf(ctx, state, pod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.PreFilterResult)
		}
	}

	var r1 *framework.Status
	if rf, ok := ret.Get(1).(func(context.Context, *framework.CycleState, *v1.Pod) *framework.Status); ok {
		r1 = rf(ctx, state, pod)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*framework.Status)
		}
	}

	return r0, r1
}

// RunPreScorePlugins provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Framework) RunPreScorePlugins(_a0 context.Context, _a1 *framework.CycleState, _a2 *v1.Pod, _a3 []*v1.Node) *framework.Status {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 *framework.Status
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, []*v1.Node) *framework.Status); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.Status)
		}
	}

	return r0
}

// RunReservePluginsReserve provides a mock function with given fields: ctx, state, pod, nodeName
func (_m *Framework) RunReservePluginsReserve(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) *framework.Status {
	ret := _m.Called(ctx, state, pod, nodeName)

	var r0 *framework.Status
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, string) *framework.Status); ok {
		r0 = rf(ctx, state, pod, nodeName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.Status)
		}
	}

	return r0
}

// RunReservePluginsUnreserve provides a mock function with given fields: ctx, state, pod, nodeName
func (_m *Framework) RunReservePluginsUnreserve(ctx context.Context, state *framework.CycleState, pod *v1.Pod, nodeName string) {
	_m.Called(ctx, state, pod, nodeName)
}

// RunScorePlugins provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Framework) RunScorePlugins(_a0 context.Context, _a1 *framework.CycleState, _a2 *v1.Pod, _a3 []*v1.Node) (framework.PluginToNodeScores, *framework.Status) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 framework.PluginToNodeScores
	if rf, ok := ret.Get(0).(func(context.Context, *framework.CycleState, *v1.Pod, []*v1.Node) framework.PluginToNodeScores); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(framework.PluginToNodeScores)
		}
	}

	var r1 *framework.Status
	if rf, ok := ret.Get(1).(func(context.Context, *framework.CycleState, *v1.Pod, []*v1.Node) *framework.Status); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*framework.Status)
		}
	}

	return r0, r1
}

// SharedInformerFactory provides a mock function with given fields:
func (_m *Framework) SharedInformerFactory() informers.SharedInformerFactory {
	ret := _m.Called()

	var r0 informers.SharedInformerFactory
	if rf, ok := ret.Get(0).(func() informers.SharedInformerFactory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(informers.SharedInformerFactory)
		}
	}

	return r0
}

// SnapshotSharedLister provides a mock function with given fields:
func (_m *Framework) SnapshotSharedLister() framework.SharedLister {
	ret := _m.Called()

	var r0 framework.SharedLister
	if rf, ok := ret.Get(0).(func() framework.SharedLister); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(framework.SharedLister)
		}
	}

	return r0
}

// UpdateNominatedPod provides a mock function with given fields: oldPod, newPodInfo
func (_m *Framework) UpdateNominatedPod(oldPod *v1.Pod, newPodInfo *framework.PodInfo) {
	_m.Called(oldPod, newPodInfo)
}

// WaitOnPermit provides a mock function with given fields: ctx, pod
func (_m *Framework) WaitOnPermit(ctx context.Context, pod *v1.Pod) *framework.Status {
	ret := _m.Called(ctx, pod)

	var r0 *framework.Status
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Pod) *framework.Status); ok {
		r0 = rf(ctx, pod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*framework.Status)
		}
	}

	return r0
}

type mockConstructorTestingTNewFramework interface {
	mock.TestingT
	Cleanup(func())
}

// NewFramework creates a new instance of Framework. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFramework(t mockConstructorTestingTNewFramework) *Framework {
	mock := &Framework{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

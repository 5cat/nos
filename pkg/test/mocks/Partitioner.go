/*
 * Copyright 2023 nebuly.com.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	state "github.com/nebuly-ai/nos/internal/partitioning/state"

	v1 "k8s.io/api/core/v1"
)

// Partitioner is an autogenerated mock type for the Partitioner type
type Partitioner struct {
	mock.Mock
}

// ApplyPartitioning provides a mock function with given fields: ctx, node, planId, partitioning
func (_m *Partitioner) ApplyPartitioning(ctx context.Context, node v1.Node, planId string, partitioning state.NodePartitioning) error {
	ret := _m.Called(ctx, node, planId, partitioning)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.Node, string, state.NodePartitioning) error); ok {
		r0 = rf(ctx, node, planId, partitioning)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPartitioner interface {
	mock.TestingT
	Cleanup(func())
}

// NewPartitioner creates a new instance of Partitioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPartitioner(t mockConstructorTestingTNewPartitioner) *Partitioner {
	mock := &Partitioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

/*
 * Copyright 2022 Nebuly.ai
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	gpu "github.com/nebuly-ai/nos/pkg/gpu"
	framework "k8s.io/kubernetes/pkg/scheduler/framework"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// PartitionableNode is an autogenerated mock type for the PartitionableNode type
type PartitionableNode struct {
	mock.Mock
}

// AddPod provides a mock function with given fields: pod
func (_m *PartitionableNode) AddPod(pod v1.Pod) error {
	ret := _m.Called(pod)

	var r0 error
	if rf, ok := ret.Get(0).(func(v1.Pod) error); ok {
		r0 = rf(pod)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clone provides a mock function with given fields:
func (_m *PartitionableNode) Clone() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Geometry provides a mock function with given fields:
func (_m *PartitionableNode) Geometry() map[gpu.Slice]int {
	ret := _m.Called()

	var r0 map[gpu.Slice]int
	if rf, ok := ret.Get(0).(func() map[gpu.Slice]int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[gpu.Slice]int)
		}
	}

	return r0
}

// HasFreeCapacity provides a mock function with given fields:
func (_m *PartitionableNode) HasFreeCapacity() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *PartitionableNode) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NodeInfo provides a mock function with given fields:
func (_m *PartitionableNode) NodeInfo() framework.NodeInfo {
	ret := _m.Called()

	var r0 framework.NodeInfo
	if rf, ok := ret.Get(0).(func() framework.NodeInfo); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(framework.NodeInfo)
	}

	return r0
}

// UpdateGeometryFor provides a mock function with given fields: slices
func (_m *PartitionableNode) UpdateGeometryFor(slices map[gpu.Slice]int) (bool, error) {
	ret := _m.Called(slices)

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[gpu.Slice]int) bool); ok {
		r0 = rf(slices)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[gpu.Slice]int) error); ok {
		r1 = rf(slices)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPartitionableNode interface {
	mock.TestingT
	Cleanup(func())
}

// NewPartitionableNode creates a new instance of PartitionableNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPartitionableNode(t mockConstructorTestingTNewPartitionableNode) *PartitionableNode {
	mock := &PartitionableNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
